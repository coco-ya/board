<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cocoyami.board.mappers.IBoardMapper">
    <select id="selectBoardId" resultType="com.cocoyami.board.entities.board.BoardEntity">
        SELECT `id` AS `id`,
               `text` AS `text`
        FROM `study_bbs`.`boards`
        WHERE BINARY id = #{id}
        LIMIT 1
    </select>

    <select id="selectBoards" resultType="com.cocoyami.board.entities.board.BoardEntity">
        SELECT `id`    AS `id`,
               `text`  AS `text`,
               `order` AS `order`
        FROM `study_bbs`.boards
        ORDER BY `order`
    </select>

    <insert id="insertArticle"
            useGeneratedKeys="true"
            keyColumn="index"
            keyProperty="index"
            parameterType="com.cocoyami.board.entities.board.ArticleEntity">
        INSERT INTO `study_bbs`.`articles`(`user_email`, `board_id`, `title`, `content`, `view`, `written_on`,
                                          `modified_on`)
        VALUES (#{userEmail}, #{boardId}, #{title}, #{content}, #{view},
                IFNULL(#{writtenOn}, DEFAULT(`written_on`)),
                IFNULL(#{modifiedOn}, DEFAULT(`modified_on`)))
    </insert>

    <select id="selectArticleByIndex" resultType="com.cocoyami.board.vos.ArticleReadVo">
        SELECT `article`.`index`       AS `index`,
               `article`.`user_email`  AS `userEmail`,
               `article`.`board_id`    AS `boardId`,
               `article`.`title`       AS `title`,
               `article`.`content`     AS `content`,
               `article`.`view`        AS `view`,
               `article`.`written_on`  AS `writtenOn`,
               `article`.`modified_on` AS `modifiedOn`,
               `user`.`nickname`       AS `userNickname`
        FROM `study_bbs`.articles AS `article`
                 LEFT JOIN `study_member`.`users` AS `user` ON `article`.`user_email` = `user`.`email`
        WHERE BINARY `index` = #{index}
        LIMIT 1
    </select>

    <update id="updateArticle"
            parameterType="com.cocoyami.board.entities.board.ArticleEntity">
        UPDATE `study_bbs`.`articles`
        SET `user_email`  = #{userEmail},
            `board_id`    = #{boardId},
            `title`       = #{title},
            `content`     = #{content},
            `view`        = #{view},
            `written_on`  = #{writtenOn},
            `modified_on` = #{modifiedOn}
        WHERE BINARY `index` = #{index}
        LIMIT 1
    </update>

    <select id="selectArticlesByBoardId"
            resultType="com.cocoyami.board.vos.ArticleReadVo">
        SELECT `articles`.`index` AS `index`,
        `articles`.`user_email` AS `userEmail`,
        `articles`.`board_id` AS `boardId`,
        `articles`.`title` AS `title`,
        `articles`.`view` AS `view`,
        `articles`.`written_on` AS `writtenOn`,
        `articles`.`modified_on` AS `modifiedOn`,
        `user`.`nickname` AS `userNickname`,
        COUNT(`comment`.`index`) AS `commentCount`
        FROM `study_bbs`.`articles`
        LEFT JOIN `study_member`.`users` AS `user` ON `user`.`email` = `articles`.`user_email`
        LEFT JOIN `study_bbs`.`comments` AS `comment` ON articles.`index` = comment.article_index
        WHERE `board_id` = #{boardId}
        <if test="criterion != null and criterion.equals('title')">
            AND REPLACE(`articles`.`title`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
        </if>
        <if test="criterion!= null and criterion.equals('all')">
            AND (REPLACE(`articles`.`title`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
            OR REPLACE(`articles`.`content`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%'))
        </if>
        <if test="criterion != null and criterion.equals('nickname')">
            AND BINARY `user`.`nickname` = #{keyword}
        </if>
        GROUP BY `articles`.`index`
        ORDER BY `articles`.`index` DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <select id="selectArticleCountByBoardId"
            resultType="int">
        SELECT COUNT(0)
        FROM `study_bbs`.`articles`
        <if test="criterion != null and criterion.equals('nickname')">
            LEFT JOIN `study_member`.`users` AS `user` ON `articles`.`user_email` = `user`.`email`
        </if>
        WHERE `articles`.`board_id` = #{boardId}
        <if test="criterion != null and criterion.equals('title')">
            AND REPLACE(`articles`.`title`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
        </if>
        <if test="criterion!= null and criterion.equals('all')">
            AND (REPLACE(`articles`.`title`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
            OR REPLACE(`articles`.`content`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%'))
        </if>
        <if test="criterion != null and criterion.equals('nickname')">
            AND BINARY `user`.`nickname` = #{keyword}
        </if>
    </select>

    <!-- 자동 증가가 있는 인서트에만 밑에 세개 쓰는거-->
    <insert id="insertComment"
            useGeneratedKeys="true"
            keyColumn="index"
            keyProperty="index"
            parameterType="com.cocoyami.board.entities.board.CommentEntity">
        INSERT INTO `study_bbs`.comments(comment_index, user_email, article_index, content, written_on)
        VALUES (#{commentIndex}, #{userEmail}, #{articleIndex}, #{content}, IFNULL(#{writtenOn}, DEFAULT(`written_on`)))
    </insert>


    <select id="selectCommentsByArticleIndex"
            resultType="com.cocoyami.board.vos.CommentVo">
        SELECT `comment`.`index`                                   AS `index`,
               `comment`.`comment_index`                           AS `commentIndex`,
               `comment`.`user_email`                              AS `userEmail`,
               `comment`.`article_index`                           AS `articleIndex`,
               `comment`.`content`                                 AS `content`,
               `comment`.`written_on`                              AS `writtenOn`,
               `user`.`nickname`                                   AS `userNickname`,
               (#{userEmail} IS NOT NULL)                          AS `isSigned`,
               (IFNULL(#{userEmail}, '') = `comment`.`user_email`) AS `isMine`,
               COUNT(`commentLike`.`comment_index`) > 0            AS `isLiked`,
               COUNT(`commentLikeCount`.`comment_index`)           AS `likeCount`
        FROM `study_bbs`.`comments` AS `comment`
                 LEFT JOIN `study_member`.`users` AS `user` ON `user`.`email` = `comment`.`user_email`
                 LEFT JOIN `study_bbs`.`comments_likes` AS `commentLike`
                           ON `comment`.`index` = `commentLike`.`comment_index`
                               AND `commentLike`.user_email = IFNULL(#{userEmail}, '')
                 LEFT JOIN `study_bbs`.`comments_likes` AS `commentLikeCount`
                           ON `comment`.`index` = `commentLikeCount`.`comment_index`

        WHERE `article_index` = #{articleIndex}
        GROUP BY `comment`.`index`
        ORDER BY `comment`.`index`
    </select>

    <select id="selectCommentByIndex"
            resultType="com.cocoyami.board.entities.board.CommentEntity">
        SELECT `index`         AS `index`,
               `comment_index` AS `commentIndex`,
               `user_email`    AS `userEmail`,
               `article_index` AS `articleIndex`,
               `content`       AS `content`,
               `written_on`    AS `writtenOn`
        FROM `study_bbs`.`comments`
        WHERE `index` = #{index}
        LIMIT 1
    </select>

    <update id="updateComment"
            parameterType="com.cocoyami.board.entities.board.CommentEntity">
        UPDATE `study_bbs`.`comments`
        SET `comment_index` = #{commentIndex},
            `user_email`    = #{userEmail},
            `article_index` = #{articleIndex},
            `content`       = #{content},
            `written_on`    = #{writtenOn}
        WHERE BINARY `index` = #{index}
        LIMIT 1
    </update>

    <delete id="deleteCommentByIndex">
        DELETE
        FROM `study_bbs`.`comments`
        WHERE `index` = #{index}
        LIMIT 1
    </delete>

</mapper>